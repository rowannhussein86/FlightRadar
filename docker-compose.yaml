version: "3.9"

services:
  broker:
    image: confluentinc/cp-kafka:7.6.1
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
      - "9101:9101"
      - "1234:1234"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_OPTS: -javaagent:/tmp/jmx/jmx_prometheus_javaagent.jar=1234:/tmp/jmx/broker.yml
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: "2g"
        reservations:
          cpus: '0.5'
          memory: "2g"
    volumes:
      - $PWD/jmx-exporter:/tmp/jmx/

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8082:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_JMX_OPTS: -javaagent:/tmp/jmx/jmx_prometheus_javaagent.jar=1234:/tmp/jmx/schema-registry.yml
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: "1g"
        reservations:
          cpus: '0.5'
          memory: "1g"
    volumes:
      - $PWD/jmx-exporter:/tmp/jmx/

  connect:
    image: confluentinc/cp-kafka-connect:7.7.1
    hostname: connect
    container_name: connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
      - "1235:1235"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_CLEANUP_POLICY: compact
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.6.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components,/tmp/ext-plugins"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      CONNECT_PRODUCER_MAX_REQUEST_SIZE: 2097152
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_JMX_OPTS: -javaagent:/tmp/jmx/jmx_prometheus_javaagent.jar=1235:/tmp/jmx/connect.yml -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: "3g"
        reservations:
          cpus: '1'
          memory: "3g"
    volumes:
      - $PWD/plugins:/tmp/ext-plugins
      - $PWD/misc:/tmp/misc
      - $PWD/config:/tmp/config
      - $PWD/jmx-exporter:/tmp/jmx/

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.6.1
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
      - connect
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: "2g"
        reservations:
          cpus: '0.5'
          memory: "2g"
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    platform: linux/amd64
    ports:
      - "8090:8080"
    depends_on:
      - broker
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: "1g"
        reservations:
          cpus: '0.5'
          memory: "1g"
  
  spark:
    image: bitnami/spark:3.5.0
    container_name: spark
    environment:
      - SPARK_MODE=master
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - ./shared:/data
      - ./streamlit-app/shared_data:/app/shared_data
      - ./jars:/opt/spark/jars

  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: spark-worker
    depends_on:
      - spark
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
    ports:
      - "8081:8081"
    volumes:
      - ./shared:/data
      - ./streamlit-app/shared_data:/app/shared_data
      - ./jars:/opt/spark/jars

  jupyter:
    image: jupyter/pyspark-notebook:spark-3.5.0
    container_name: jupyter
    ports:
      - "8888:8888"
    environment:
      - PYSPARK_PYTHON=python3
      - SPARK_MASTER=spark://spark:7077
      - PYSPARK_SUBMIT_ARGS=--packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0 pyspark-shell
    command: start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''
    volumes:
      - ./shared:/data
      - ./streamlit-app/shared_data:/app/shared_data
      - ./jars:/opt/spark/jars

    depends_on:
      - spark

  streamlit: #live dashboard
    image: python:3.11-slim
    container_name: streamlit
    ports:
      - "8501:8501"
    volumes:
      - ./streamlit-app:/app
      - ./streamlit-app/shared_data:/app/shared_data
    working_dir: /app
    command: >
      sh -c "pip install --no-cache-dir -r requirements.txt &&
             streamlit run app.py --server.port=8501 --server.address=0.0.0.0"
    depends_on:
      - broker
      - spark
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: "1g"
        reservations:
          cpus: '0.5'
          memory: "1g"
    
  superset:
    image: apache/superset:latest
    container_name: superset
    restart: always
    depends_on:
      - postgres_general
    environment:
      SUPERSET_SECRET_KEY: "123456789" #secret key
      DATABASE_DIALECT: postgresql
      DATABASE_HOST: postgres_general
      DATABASE_PORT: 5432
      DATABASE_USER: admin
      DATABASE_PASSWORD: admin
      DATABASE_DB: flights_project
    ports:
      - "8087:8088"
    command: >
      sh -c "
        superset db upgrade &&
        superset fab create-admin --username admin --firstname Superset --lastname Admin --email admin@superset.com --password admin &&
        superset init &&
        superset run -h 0.0.0.0 -p 8088
      "

  postgres_general:
    image: postgres:15
    container_name: postgres_general
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: flights_project
    ports:
      - "5432:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4:8
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8085:80"
    depends_on:
      - postgres_general


volumes:
  pg_data:
  mongodb_data:
  streamlit-data:
  postgres-db-volume:
  namenode-data:
  datanode-data:
